/*
 * IMainFrame.java
 *
 * Created on __DATE__, __TIME__
 */

package marttinterface;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Vector;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane; //Start COPY
import java.awt.*;
import java.text.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.StyledDocument;
import java.awt.FlowLayout;

import knowledgebase.Composite;

import visitor.ElementComposite;

//End COPY

/**
 *
 * @author  __USER__
 */
public class InterfaceFrame extends javax.swing.JFrame {
	//start COPY
	private boolean preset = false;
	private JPanel jPanel = new JPanel();
	private Setting setting = null;
	private int displayed = -1;
	private ListController listcontroller = null;
	private ArrayList errorlist = new ArrayList();
	private SaveToDepotDialog saveToDepot;
	private Composer composer = null;
	private String folderpath = null;
	private javax.swing.JMenuItem showerrors = new JMenuItem();

	//end COPY
	/** Creates new form IMainFrame */
	public InterfaceFrame(Composite kb, ElementComposite ec) {
		composer = new Composer(this, kb, ec);
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		jSplitPane1 = new javax.swing.JSplitPane(JSplitPane.VERTICAL_SPLIT, new JPanel(), new JPanel() );
		jSplitPane1.setOneTouchExpandable(true);
		statusBar = new javax.swing.JLabel();
		jToolBar1 = new javax.swing.JToolBar();
		Open = new javax.swing.JButton();
		jToolBar2 = new javax.swing.JToolBar();
		Compose = new javax.swing.JButton();
		jButton1 = new javax.swing.JButton();
		Markup = new javax.swing.JButton();
		jMenuBar1 = new javax.swing.JMenuBar();
		batch = new javax.swing.JMenu();
		open = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JSeparator();
		showlist = new javax.swing.JMenuItem();
		purgelist = new javax.swing.JMenuItem();
		removelist = new javax.swing.JMenuItem();
		importlist = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JSeparator();
		saveas = new javax.swing.JMenuItem();
		savetodepot = new javax.swing.JMenuItem();
		jSeparator3 = new javax.swing.JSeparator();
		save = new javax.swing.JMenuItem();
		onebyone = new javax.swing.JMenu();
		compose = new javax.swing.JMenuItem();
		markup = new javax.swing.JMenuItem();
		edit = new javax.swing.JMenu();
		format = new javax.swing.JMenu();
		tools = new javax.swing.JMenu();
		recorderror = new javax.swing.JMenuItem();
		help = new javax.swing.JMenu();
		about = new javax.swing.JMenuItem();
		exitm = new javax.swing.JMenu();
		exit = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("MARTT Interface: Composing, Editing, and Mark-up");

		statusBar.setText("Status:");

		Open
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Documents and Settings\\hongcui\\Desktop\\WorkFeb2008\\Projects\\MARTTInterfaceWorkspace\\MARTTInterface\\src\\marttinterface\\images\\open.GIF"));
		Open.setText("Open");
		Open.setToolTipText("Open a folder in batch mode");
		Open.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				openActionPerformed(evt);
			}
		});
		jToolBar1.add(Open);

		Compose
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Documents and Settings\\hongcui\\Desktop\\WorkFeb2008\\Projects\\MARTTInterfaceWorkspace\\MARTTInterface\\src\\marttinterface\\images\\compose.GIF"));
		Compose.setText("Compose");
		Compose.setToolTipText("Compose a new description");
	    Compose.addActionListener(new
                Composer_jMenuItemCompose_actionAdapter(this.composer));

		jToolBar2.add(Compose);

		jButton1.setText(" ");
		jToolBar2.add(jButton1);

		Markup
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Documents and Settings\\hongcui\\Desktop\\WorkFeb2008\\Projects\\MARTTInterfaceWorkspace\\MARTTInterface\\src\\marttinterface\\images\\markup.GIF"));
		Markup.setText("Mark-up");
		Markup.setToolTipText("Markup a text description");
		Markup.addActionListener(new
                Composer_jMenuItemMarkup_actionAdapter(this.composer));
	

		

		jToolBar2.add(Markup);

		jMenuBar1.setFont(new java.awt.Font("Tahoma", 0, 18));
		batch.setBorder(null);
		batch.setText("Batch-Mode");

		open.setText("Open Folder");
		open.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				openActionPerformed(evt);
			}
		});

		batch.add(open);

		batch.add(jSeparator1);

		/*showlist.setText("Show File List");
		showlist.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showlistActionPerformed(evt);
			}
		});

		batch.add(showlist);*/

		purgelist.setText("Purge File List");
		purgelist.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				purgelistActionPerformed(evt);
			}
		});

		batch.add(purgelist);

		removelist.setText("Remove File List");
		removelist.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removelistActionPerformed(evt);
			}
		});

		batch.add(removelist);

		importlist.setText("Import File List");
		importlist.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				importlistActionPerformed(evt);
			}
		});

		batch.add(importlist);

		batch.add(jSeparator2);
		save.setText("Save");
		save.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				savefileActionPerformed(evt);
			}
		});
		batch.add(save);
		
		saveas.setText("Save File As");
		saveas.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveasActionPerformed(evt);
			}
		});

		batch.add(saveas);

		savetodepot.setText("Save to Depot");
		savetodepot.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				savetodepotActionPerformed(evt);
			}
		});

		batch.add(savetodepot);


		jMenuBar1.add(batch);

		onebyone.setBorder(null);
		onebyone.setText("Composing-Mode");
		compose.setText("Compose a Description");
		compose.addActionListener(new
                Composer_jMenuItemCompose_actionAdapter(this.composer));

		onebyone.add(compose);

		markup.setText("Mark up the Description");
		markup.addActionListener(new
                Composer_jMenuItemMarkup_actionAdapter(this.composer));
	
		onebyone.add(markup);

		jMenuBar1.add(onebyone);

		edit.setBorder(null);
		edit.setText("Edit");
		jMenuBar1.add(edit);

		format.setBorder(null);
		format.setText("Format");
		jMenuBar1.add(format);

		tools.setBorder(null);
		tools.setText("Tools");
		recorderror.setText("Record an Error");
		recorderror.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				recorderrorActionPerformed(evt);
			}
		});
		/*recorderror.addActionListener(new
                ListController_jMenuItemAddRecord_actionAdapter(
                    listcontroller));*/
		showerrors.setText("Show Errors");
		/*showerrors.addActionListener(new
                ListController_jMenuItemShowStat_actionAdapter(
                    listcontroller));*/
		showerrors.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showerrorsActionPerformed(evt);
			}
		});
		recorderror.setEnabled(false);
		showerrors.setEnabled(false);
		tools.add(recorderror);
		tools.add(showerrors);

		jMenuBar1.add(tools);

		help.setBorder(null);
		help.setText("Help");
		about.setText("About");
		about.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				aboutActionPerformed(evt);
			}
		});

		help.add(about);

		jMenuBar1.add(help);

		exitm.setBorder(null);
		exitm.setText("Exit");
		exit.setText("Exit");
		exit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitActionPerformed(evt);
			}
		});

		exitm.add(exit);

		jMenuBar1.add(exitm);

		setJMenuBar(jMenuBar1);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																jSplitPane1,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																689,
																Short.MAX_VALUE)
														.add(
																statusBar,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																689,
																Short.MAX_VALUE)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				jToolBar1,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				jToolBar2,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				189,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
										.addContainerGap()));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																jToolBar1,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																25,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(
																jToolBar2,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																25,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												jSplitPane1,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												352,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												statusBar,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												18, Short.MAX_VALUE)
										.addContainerGap()));
		pack();
	}// </editor-fold>//GEN-END:initComponents

	//GEN-FIRST:event_jButton1ActionPerformed
	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}//GEN-LAST:event_jButton1ActionPerformed

	//GEN-FIRST:event_exitActionPerformed
	public void exitActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		if (setting != null && setting.getMakeTodo()) {
			saveTodoList();
		}
		System.exit(0);
	}//GEN-LAST:event_exitActionPerformed

	//GEN-FIRST:event_aboutActionPerformed
	public void aboutActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		InterfaceFrame_AboutBox dlg = new InterfaceFrame_AboutBox(this);
		Dimension dlgSize = dlg.getPreferredSize();
		Dimension frmSize = getSize();
		Point loc = getLocation();
		dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x,
				(frmSize.height - dlgSize.height) / 2 + loc.y);
		dlg.setModal(true);
		dlg.pack();
		dlg.setVisible(true);
		//dlg.show();
	}//GEN-LAST:event_aboutActionPerformed

	//GEN-FIRST:event_recorderrorActionPerformed
	public void recorderrorActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
	    AddRecordDialog addrecord = new AddRecordDialog(listcontroller);
	    //Center the window
	    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	    Dimension dialogSize = addrecord.getSize();
	    if (dialogSize.height > screenSize.height) {
	      dialogSize.height = screenSize.height;
	    }
	    if (dialogSize.width > screenSize.width) {
	      dialogSize.width = screenSize.width;
	    }
	    addrecord.setLocation( (screenSize.width - dialogSize.width) / 2,
	                          (screenSize.height - dialogSize.height) / 2);
	    addrecord.setVisible(true);
	}//GEN-LAST:event_recorderrorActionPerformed
	public void showerrorsActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
	    String message = listcontroller.compiledErrors();
	    JOptionPane.showMessageDialog(this, message);
	}
	
	//GEN-FIRST:event_markupActionPerformed
	/*public void markupActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}*///GEN-LAST:event_markupActionPerformed

	//GEN-FIRST:event_composeActionPerformed
	/*public void composeActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}*///GEN-LAST:event_composeActionPerformed

	//GEN-FIRST:event_savetodepotActionPerformed
	public void savetodepotActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		if (listcontroller.tree != null && listcontroller.tree.isVisible()) {
			showErrorRecords();
			saveToDepot = new SaveToDepotDialog(this, listcontroller);
			//Center the window
			Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
			Dimension dialogSize = saveToDepot.getSize();
			if (dialogSize.height > screenSize.height) {
				dialogSize.height = screenSize.height;
			}
			if (dialogSize.width > screenSize.width) {
				dialogSize.width = screenSize.width;
			}
			saveToDepot.setLocation((screenSize.width - dialogSize.width) / 2,
					(screenSize.height - dialogSize.height) / 2);
			saveToDepot.setVisible(true);
		}

	}//GEN-LAST:event_savetodepotActionPerformed

	//GEN-FIRST:event_saveasActionPerformed
	public void saveasActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		showErrorRecords();
		saveAsFile();
	}//GEN-LAST:event_saveasActionPerformed

	//GEN-FIRST:event_importlistActionPerformed
	public void importlistActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		if(setting == null){
			setting = new Setting();
		}
		setting.setMakeTodo(true);
		File file = new File(System.getProperty("user.dir") + "\\"
				+ setting.todofile);
		if (!file.exists()) {
			JOptionPane.showMessageDialog(this, "To-do list file not exist");
		} else {
			//read the file line by line
			Vector list = new Vector();
			try {
				LineNumberReader r = new LineNumberReader(new FileReader(file));
				setting.setSchemaPath(r.readLine()); //first line in todolist file is the filepath for the schema
				setting.setFilePath(r.readLine());//second line in the todolist file is the filepath of the source directory
				for (String line = r.readLine(); line != null; line = r
						.readLine()) {
					MyFile mfile = new MyFile(new File(line)); //wrap each line as MyFile
					list.add(mfile); //save MyFiles in a vector
				}
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
			setting.setTodoList(list); //set the vector in Setting
			listcontroller = new ListController(this);
			listcontroller.setUp();
		}
	}//GEN-LAST:event_importlistActionPerformed

	//GEN-FIRST:event_removelistActionPerformed
	public void removelistActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		File f = new File(System.getProperty("user.dir") + "\\"
				+ Setting.todofile);
		f.delete();
	}//GEN-LAST:event_removelistActionPerformed

	//GEN-FIRST:event_purgelistActionPerformed
	public void purgelistActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		if (setting != null) {//only when there is a list shown
			int n = setting.purgeTodoList();
			statusBar.setText("Purged " + n + " files");
			listcontroller.showList();
			//clear tree and textPane
			if (listcontroller.treeScrollPane != null
					&& listcontroller.tree != null) {
				listcontroller.tree = null;
				listcontroller.treeScrollPane.removeAll();
			}
			if (listcontroller.textPane != null) {
				listcontroller.textPane.setText("");
			}
		}
	}//GEN-LAST:event_purgelistActionPerformed

	//GEN-FIRST:event_showlistActionPerformed
	public void showlistActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		if (listcontroller != null) {
			listcontroller.showList();
		}
	}//GEN-LAST:event_showlistActionPerformed

	//GEN-FIRST:event_openActionPerformed
	public void openActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		//takes care the todolist from the last session
		if (setting != null && setting.getMakeTodo()) {
			saveTodoList();
		}
		setting = new Setting();
		if(folderpath != null && this.preset == true){
			setting.setFilePath(folderpath);
			this.preset = false;
		}
		OpenDialog open = new OpenDialog(this);
		//Center the window
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		Dimension dialogSize = open.getSize();
		if (dialogSize.height > screenSize.height) {
			dialogSize.height = screenSize.height;
		}
		if (dialogSize.width > screenSize.width) {
			dialogSize.width = screenSize.width;
		}
		open.setLocation((screenSize.width - dialogSize.width) / 2,
				(screenSize.height - dialogSize.height) / 2);
		open.setVisible(true);

	}//GEN-LAST:event_openActionPerformed

	//GEN-FIRST:event_jMenu1ActionPerformed
	public void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}//GEN-LAST:event_jMenu1ActionPerformed

	//GEN-FIRST:event_savefileActionPerformed
	public void savefileActionPerformed(java.awt.event.ActionEvent evt) {
		// COPY add your handling code here:
		if (displayed >= 0) {
			showErrorRecords();
			File fpath = ((MyFile) setting.getTodoList().get(displayed))
					.getFile();
			saveSelectedFile(fpath);
		}
	}//GEN-LAST:event_savefileActionPerformed

	void openDialog_jButtonOK_actionPerformed(OpenDialog dialog, ActionEvent e) {
		if (dialog.jTextFieldDepot.getText().trim().compareTo("") != 0) {
			setting.setDiff(true);
		}
		if (dialog.jCheckBox1.isSelected()) {
			setting.setMakeTodo(true);
		}
		this.listcontroller = this.listcontroller == null ? new ListController(
				this) : this.listcontroller;
		this.listcontroller.setUp();
		dialog.setVisible(false);
		recorderror.setEnabled(true);
		showerrors.setEnabled(true);
		String path = setting.getFilePath();
		int i = path.lastIndexOf('\\');
		this.setTitle("MARTT Interface: "+path.substring(i+1));
		//reset menu bar
		/*toolBar.setListContrller(listcontroller);
		 toolBar.createDefaultToolBar(ToolBar.ANNOTE_MODE);
		 menuBar.setListController(listcontroller);
		 menuBar.setDefaultMenuBar(MenuBar.ANNOTE_MODE);*/
		/*int count = jToolBar.getComponentCount();
		 while(count >3){
		 jToolBar.remove(3);
		 count = jToolBar.getComponentCount();
		 }
		 jToolBar.repaint();*/
	}

	//##################################################Private Methods
	public JLabel getStatus() {
		return statusBar;
	}

	public JSplitPane getSplitPane() {
		return jSplitPane1;
	}

	public ListController getListController() {
		return listcontroller;
	}

	public void setListController(ListController c) {
		listcontroller = c;
	}

	public Setting getSetting() {
		return setting;
	}

	public void setDisplayed(int d) {
		displayed = d;
	}

	public int getDisplayed() {
		return displayed;
	}

	public ArrayList getErrorList() {
		return errorlist;
	}

	public Composer getComposer() {
		return composer;
	}

	public void setTobeOpenedFolder(String folderpath) {
		this.folderpath = folderpath; //setting is null at this time
		this.preset = true;
	}


	private void showErrorRecords() {
		//show record one by one and ask for confirmation
		if (listcontroller.adderror && listcontroller.records.size() != 0) {
			Enumeration en = listcontroller.records.elements();
			while (en.hasMoreElements()) {
				ErrorRecord r = (ErrorRecord) en.nextElement();
				AddRecordDialog dialog = new AddRecordDialog(listcontroller);
				dialog.jTextFieldFileName.setText(r.getFile());
				dialog.jComboBoxErrorType.insertItemAt(r.getError(), 0);
				dialog.jComboBoxErrorType.setSelectedIndex(0);
				dialog.jTextFieldCause.setText(r.getCause());
				dialog.jTextFieldFPClass.setText(r.getFpclass());
				dialog.jTextFieldFNClass.setText(r.getFnclass());

				Dimension screenSize = Toolkit.getDefaultToolkit()
						.getScreenSize();
				Dimension dialogSize = dialog.getSize();
				if (dialogSize.height > screenSize.height) {
					dialogSize.height = screenSize.height;
				}
				if (dialogSize.width > screenSize.width) {
					dialogSize.width = screenSize.width;
				}
				dialog.setLocation((screenSize.width - dialogSize.width) / 2,
						(screenSize.height - dialogSize.height) / 2);
				dialog.setVisible(true);
			}
			listcontroller.records.removeAllElements();
		}

	}

	/**
	 * first line is the schema path
	 * the following lines are the todo list
	 */
	private void saveTodoList() {
		FileWriter out = null;
		try {
			out = new FileWriter(new File(setting.todofile)); //file path of todofile
			Vector output = setting.getTodoList();
			output.add(0, new MyFile(new File(setting.getSchemaPath())));
			output.add(1, new MyFile(new File(setting.getFilePath())));
			if (!dumpToDisk(output, out)) {
				JOptionPane.showMessageDialog(this,
						"Exit with error: failed to save to-do list", "Error",
						JOptionPane.ERROR_MESSAGE);
			}
			out.close();
		} catch (IOException exp) {
			exp.printStackTrace();
		}

	}

	boolean dumpToDisk(Vector list, FileWriter out) {
		try {
			Enumeration en = list.elements();
			while (en.hasMoreElements()) {
				MyFile file = (MyFile) en.nextElement();
				out.write(file.getFile().getPath());
				out.write(System.getProperty("line.separator"));
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	//Overridden so we can exit when window is closed
	protected void processWindowEvent(WindowEvent e) {
		super.processWindowEvent(e);
		if (e.getID() == WindowEvent.WINDOW_CLOSING) {
			exitActionPerformed(null);
		}
	}

	public boolean saveAsFile() {
		JFileChooser fchooser = new JFileChooser();
		fchooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		if (fchooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			File fpath = fchooser.getSelectedFile();
			return saveSelectedFile(fpath);
		}
		return false;
	}

	//save the file with index: frame.displayed
	public boolean saveSelectedFile(File fpath) {
		String content = DomToTreeModelAdapter.xmlout;
		int count = listcontroller.treepath == null ? 0
				: listcontroller.treepath.getPathCount();
		//make sure the root element is displayed and modified
		if (listcontroller.dirty && listcontroller.treepath.getPathCount() == 2) {
			listcontroller.refreshTree();
		}
		content += listcontroller.dom2tree.document.getDocumentElement()
				.toString();

		if (saveFile(fpath, content)) {
			//updating list here would invoke valueChanged and cause side effects
			//instead, record item status only in setting
			//statusBar.setText("saved to " + fpath.getName());
			return true;
		} else {
			JOptionPane.showMessageDialog(this, "Failed to save "
					+ (MyFile) setting.getTodoList().get(displayed));
			return false;
		}
	}

	/**
	 *
	 */
	public boolean saveFile(File fpath, String content) {
		try {
			FileWriter out = new FileWriter(fpath);
			out.write(content);
			out.flush();
			if (setting != null) { //annotation mode
				setting.setListItem(displayed);
				statusBar.setText("file " + displayed
						+ " is saved to "+fpath.getName()+" and scheduled to purge");
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new InterfaceFrame(null, null).setVisible(true);
			}
		});
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton Compose;
	private javax.swing.JButton Markup;
	private javax.swing.JButton Open;
	private javax.swing.JMenuItem about;
	private javax.swing.JMenu batch;
	private javax.swing.JMenuItem compose;
	private javax.swing.JMenu edit;
	private javax.swing.JMenuItem exit;
	private javax.swing.JMenu exitm;
	private javax.swing.JMenu format;
	private javax.swing.JMenu help;
	private javax.swing.JMenuItem importlist;
	private javax.swing.JButton jButton1;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JSeparator jSeparator3;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JToolBar jToolBar2;
	private javax.swing.JMenuItem markup;
	private javax.swing.JMenu onebyone;
	private javax.swing.JMenuItem open;
	private javax.swing.JMenuItem purgelist;
	private javax.swing.JMenuItem recorderror;
	private javax.swing.JMenuItem removelist;
	private javax.swing.JMenuItem save;
	private javax.swing.JMenuItem saveas;
	private javax.swing.JMenuItem savetodepot;
	private javax.swing.JMenuItem showlist;
	private javax.swing.JLabel statusBar;
	private javax.swing.JMenu tools;
	// End of variables declaration//GEN-END:variables

}

class InterfaceFrame_jMenuFileExit_ActionAdapter implements ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuFileExit_ActionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.exitActionPerformed(e);
	}
}

class InterfaceFrame_jMenuHelpAbout_ActionAdapter implements ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuHelpAbout_ActionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.aboutActionPerformed(e);
	}
}

class InterfaceFrame_jMenuItemOpenFile_actionAdapter implements
		java.awt.event.ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuItemOpenFile_actionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.openActionPerformed(e);
	}
}

class InterfaceFrame_jMenuItemSaveAs_actionAdapter implements
		java.awt.event.ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuItemSaveAs_actionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.saveasActionPerformed(e);
	}
}

class InterfaceFrame_jMenuItemSave2Depot_actionAdapter implements
		ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuItemSave2Depot_actionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.savetodepotActionPerformed(e);
	}
}

class InterfaceFrame_jMenuItemRemoveListFile_actionAdapter implements
		java.awt.event.ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuItemRemoveListFile_actionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.removelistActionPerformed(e);
	}
}

class InterfaceFrame_jMenuItemImportList_actionAdapter implements
		java.awt.event.ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuItemImportList_actionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.importlistActionPerformed(e);
	}
}

class InterfaceFrame_jMenuItemSave_actionAdapter implements ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuItemSave_actionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.savefileActionPerformed(e);
	}
}

class InterfaceFrame_jMenuItemShowList_actionAdapter implements
		java.awt.event.ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuItemShowList_actionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.showlistActionPerformed(e);
	}
}

class InterfaceFrame_jMenuItemPurgeList_actionAdapter implements ActionListener {
	InterfaceFrame adaptee;

	InterfaceFrame_jMenuItemPurgeList_actionAdapter(InterfaceFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.purgelistActionPerformed(e);
	}
}
